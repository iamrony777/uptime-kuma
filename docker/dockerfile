# FROM louislam/uptime-kuma:base-debian AS build

# DON'T UPDATE TO node:14-bullseye-slim, see #372.
# If the image changed, the second stage image should be changed too
FROM node:16-buster-slim as build
ARG TARGETPLATFORM

WORKDIR /app

# Install Curl
# Install Apprise, add sqlite3 cli for debugging in the future, iputils-ping for ping, util-linux for setpriv
# Stupid python3 and python3-pip actually install a lot of useless things into Debian, specify --no-install-recommends to skip them, make the base even smaller than alpine!
RUN apt update && \
    apt --yes --no-install-recommends install python3 python3-pip python3-cryptography python3-six python3-yaml python3-click python3-markdown python3-requests python3-requests-oauthlib \
        sqlite3 iputils-ping util-linux dumb-init && \
    pip3 --no-cache-dir install apprise==0.9.8.3 && \
    rm -rf /var/lib/apt/lists/*

# Install cloudflared
# dpkg --add-architecture arm: cloudflared do not provide armhf, this is workaround. Read more: https://github.com/cloudflare/cloudflared/issues/583
COPY extra/download-cloudflared.js ./extra/download-cloudflared.js
RUN node ./extra/download-cloudflared.js $TARGETPLATFORM && \
    dpkg --add-architecture arm && \
    apt update && \
    apt --yes --no-install-recommends install ./cloudflared.deb && \
    rm -rf /var/lib/apt/lists/* && \
    rm -f cloudflared.deb


WORKDIR /app

ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1

COPY . .
RUN npm ci --production && \
    chmod +x /app/extra/entrypoint.sh


FROM build

WORKDIR /app

# Copy app files from build layer
COPY --from=build /app /app
RUN pip3 install --no-cache-dir -U pip setuptools wheel && \
    pip3 install --no-cache-dir -r requirements.txt && \
    chmod +x /app/start.sh

EXPOSE 3001
VOLUME ["/app/data"]
HEALTHCHECK --interval=60s --timeout=30s --start-period=180s --retries=5 CMD node extra/healthcheck.js
ENTRYPOINT ["/usr/bin/dumb-init", "--", "extra/entrypoint.sh"]
# CMD ["node", "server/server.js"]
CMD ["bash", "start.sh"]


# FROM release AS nightly
# RUN npm run mark-as-nightly


# Upload the artifact to Github
# FROM louislam/uptime-kuma:base-debian AS upload-artifact
# WORKDIR /
# RUN apt update && \
#     apt --yes install curl file

# COPY --from=build /app /app

# ARG VERSION
# ARG GITHUB_TOKEN
# ARG TARGETARCH
# ARG PLATFORM=debian
# ARG FILE=$PLATFORM-$TARGETARCH-$VERSION.tar.gz
# ARG DIST=dist.tar.gz

# RUN chmod +x /app/extra/upload-github-release-asset.sh

# # Full Build
# # RUN tar -zcvf $FILE app
# # RUN /app/extra/upload-github-release-asset.sh github_api_token=$GITHUB_TOKEN owner=louislam repo=uptime-kuma tag=$VERSION filename=$FILE

# # Dist only
# RUN cd /app && tar -zcvf $DIST dist
# RUN /app/extra/upload-github-release-asset.sh github_api_token=$GITHUB_TOKEN owner=louislam repo=uptime-kuma tag=$VERSION filename=/app/$DIST

